# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    0.0, 65.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 65.0), point2=(
    80.0, 65.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -37.8494415283203, 41.9171829223633), value=60.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    38.8918914794922, 88.6168670654297), value=80.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 40.0), point2=(
    20.0, 60.0))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].HorizontalDimension(textPoint=(
    10.8297653198242, 76.7505569458008), value=8.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].sketches['__profile__'].AngularDimension(line1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], line2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], textPoint=(20.0, 
    0.0), value=20.0)
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].AngularDimension(line1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], line2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], textPoint=(
    0.139434814453125, 53.7834930419922), value=20.0)
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseWire(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].IProfile(b1=10.13, b2=10.13, h=10.4, l=5.2, name=
    'Profile-1', t1=0.77, t2=0.77, t3=0.47)
mdb.models['Model-1'].BeamSection(alphaDamping=0.0, beamSectionOffset=(0.0, 
    0.0), beamShape=CONSTANT, betaDamping=0.0, compositeDamping=0.0, 
    consistentMassMatrix=False, dependencies=0, integration=BEFORE_ANALYSIS, 
    name='Beam-Column', poissonRatio=0.3, profile='Profile-1', table=((
    29010000.0, 11160000.0), ), temperatureDependency=OFF, thermalExpansion=
    OFF)
mdb.models['Model-1'].Material(name='Material-1')
mdb.models['Model-1'].materials['Material-1'].Elastic(table=((29010000.0, 0.3), 
    ))
mdb.models['Model-1'].TrussSection(area=5.0, material='Material-1', name=
    'Truss')
mdb.models['Model-1'].parts['Part-1'].Set(edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#1e ]', 
    ), ), name='Set-1')
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['Set-1'], sectionName=
    'Beam-Column', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Part-1'].Set(edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-2')
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['Set-2'], sectionName='Truss', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name='Part-1-1', 
    part=mdb.models['Model-1'].parts['Part-1'])
mdb.models['Model-1'].StaticStep(name='Step-1', previous='Initial')
mdb.models['Model-1'].rootAssembly.Set(name='Set-1', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-1', region=mdb.models['Model-1'].rootAssembly.sets['Set-1'], u1=0.0, 
    u2=0.0, ur3=0.0)
mdb.models['Model-1'].rootAssembly.Set(name='Set-2', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].ConcentratedForce(cf2=-5000.0, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-2'])
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=B22, elemLibrary=STANDARD), ), regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#1e ]', ), ), ))
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=T2D2, elemLibrary=STANDARD), ), regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'], ), size=100.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'], ))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='65', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Model-1'].parts['Part-1'].Set(edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#1e ]', 
    ), ), name='Set-3')
mdb.models['Model-1'].parts['Part-1'].assignBeamSectionOrientation(method=
    N1_COSINES, n1=(0.0, 0.0, -1.0), region=
    mdb.models['Model-1'].parts['Part-1'].sets['Set-3'])
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['65'].submit(consistencyChecking=OFF)
mdb.jobs['65']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Atabak', 'handle': 0, 'jobName': '65'})
mdb.jobs['65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': '65'})
mdb.jobs['65']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\ASUS\\Desktop\\65.odb', 'jobName': '65'})
mdb.jobs['65']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '65'})
mdb.jobs['65']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'Atabak', 'handle': 10916, 'jobName': '65'})
mdb.jobs['65']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '65'})
mdb.jobs['65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '65'})
mdb.jobs['65']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '65', 'memory': 29.0})
mdb.jobs['65']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8044.0, 'jobName': '65'})
mdb.jobs['65']._Message(MINIMUM_MEMORY, {'minimum_memory': 22.0, 
    'phase': STANDARD_PHASE, 'jobName': '65'})
mdb.jobs['65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': '65'})
mdb.jobs['65']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': '65', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['65']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '65'})
mdb.jobs['65']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '65'})
mdb.jobs['65']._Message(JOB_COMPLETED, {'time': 'Sun Apr 25 21:22:05 2021', 
    'jobName': '65'})
mdb.models['Model-1'].parts['Part-1'].Set(edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-4')
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['Set-4'], sectionName='Truss', 
    thicknessAssignment=FROM_SECTION)
del mdb.models['Model-1'].parts['Part-1'].sectionAssignments[2]
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.models['Model-1'].rootAssembly.features['Part-1-1']
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name='Part-1-1', 
    part=mdb.models['Model-1'].parts['Part-1'])
del mdb.models['Model-1'].boundaryConditions['BC-1']
mdb.models['Model-1'].rootAssembly.Set(name='Set-5', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-1', region=mdb.models['Model-1'].rootAssembly.sets['Set-5'], u1=0.0, 
    u2=0.0, ur3=0.0)
mdb.models['Model-1'].rootAssembly.Set(name='Set-6', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].ConcentratedForce(cf2=-5000.0, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-2', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-6'])
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=B21, elemLibrary=STANDARD), ), regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#1e ]', ), ), ))
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=T2D2, elemLibrary=STANDARD), ), regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'], ), size=100.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'], ))
del mdb.models['Model-1'].loads['Load-1']
mdb.jobs['65'].submit(consistencyChecking=OFF)
mdb.jobs['65']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Atabak', 'handle': 0, 'jobName': '65'})
mdb.jobs['65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': '65'})
mdb.jobs['65']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\ASUS\\Desktop\\65.odb', 'jobName': '65'})
mdb.jobs['65']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '65'})
mdb.jobs['65']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'Atabak', 'handle': 2304, 'jobName': '65'})
mdb.jobs['65']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '65'})
mdb.jobs['65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '65'})
mdb.jobs['65']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '65', 'memory': 29.0})
mdb.jobs['65']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8044.0, 'jobName': '65'})
mdb.jobs['65']._Message(MINIMUM_MEMORY, {'minimum_memory': 22.0, 
    'phase': STANDARD_PHASE, 'jobName': '65'})
mdb.jobs['65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': '65'})
mdb.jobs['65']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': '65', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['65']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '65'})
mdb.jobs['65']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '65'})
mdb.jobs['65']._Message(JOB_COMPLETED, {'time': 'Sun Apr 25 21:33:50 2021', 
    'jobName': '65'})
# Save by ASUS on 2021_04_25-21.38.24; build 2020 2019_09_13-22.19.31 163176
